{"knowledge": "中断、异常与系统调用。", "question": "\"1）系统调用的参数传递有几种方式？各有什么特点？\r\n2）sys_exec是一个加载和执行指定可执行文件的系统调用。请说明在下面的ucore实现中，它的三个参数分别是以什么方式传递的。\r\n=============Proc.c (kern\\process)============= ...... // do_execve - call\r\nexit_mmap(mm)&amp;pug;_pgdir(mm) to reclaim memory space of current process //\r\ndo_execve(const char name, int argc, const char argv) {\r\nstatic_assert(EXEC_MAX_ARG_LEN >= FS_MAX_FPATH_LEN); struct mm_struct mm =\r\ncurrent->mm; if (!(argc >= 1 && argc <= EXEC_MAX_ARG_NUM)) { return -E_INVAL;\r\n} char local_name[PROC_NAME_LEN + 1]; memset(local_name, 0,\r\nsizeof(local_name)); char kargv[EXEC_MAX_ARG_NUM]; const char path; int ret\r\n= -E_INVAL; lock_mm(mm); if (name == NULL) { snprintf(local_name,\r\nsizeof(local_name), \" %d\", current->pid); } else { if (!copy_string(mm,\r\nlocal_name, name, sizeof(local_name))) { unlock_mm(mm); return ret; } } if\r\n((ret = copy_kargv(mm, argc, kargv, argv)) != 0) { unlock_mm(mm); return ret;\r\n} path = argv[0]; unlock_mm(mm); files_closeall(current->filesp); /\r\nsysfile_open will check the first argument path, thus we have to use a user-\r\nspace pointer, and argv[0] may be incorrect / int fd; if ((ret = fd =\r\nsysfile_open(path, O_RDONLY)) < 0) { goto execve_exit; } if (mm != NULL) {\r\nlcr3(boot_cr3); if (mm_count_dec(mm) == 0) { exit_mmap(mm); put_pgdir(mm);\r\nmm_destroy(mm); } current->mm = NULL; } ret= -E_NO_MEM;; if ((ret =\r\nload_icode(fd, argc, kargv)) != 0) { goto execve_exit; } put_kargv(argc,\r\nkargv); set_proc_name(current, local_name); return 0; execve_exit:\r\nput_kargv(argc, kargv); do_exit(ret); panic(\"already exit: %e.\r\n\", ret); }\r\n...... =============Syscall.c (kern\\syscall)============= ...... static int\r\nsys_exec(uint32_t arg[]) { const char name = (const char )arg[0]; int argc =\r\n(int)arg[1]; const char argv = (const char )arg[2]; return do_execve(name,\r\nargc, argv); } ...... static int (syscalls[])(uint32_t arg[]) = { [SYS_exit]\r\nsys_exit, [SYS_fork] sys_fork, [SYS_wait] sys_wait, [SYS_exec] sys_exec,\r\n[SYS_yield] sys_yield, [SYS_kill] sys_kill, [SYS_getpid] sys_getpid,\r\n[SYS_putc] sys_putc, [SYS_pgdir] sys_pgdir, }; #define NUM_SYSCALLS\r\n((sizeof(syscalls)) / (sizeof(syscalls[0]))) void syscall(void) { struct\r\ntrapframe tf = current->tf; uint32_t arg[5]; int num = tf->tf_regs.reg_eax;\r\nif (num >= 0 && num < NUM_SYSCALLS) { if (syscalls[num] != NULL) { arg[0] =\r\ntf->tf_regs.reg_edx; arg[1] = tf->tf_regs.reg_ecx; arg[2] =\r\ntf->tf_regs.reg_ebx; arg[3] = tf->tf_regs.reg_edi; arg[4] =\r\ntf->tf_regs.reg_esi; tf->tf_regs.reg_eax = syscalls[num](arg); return ; } }\r\nprint_trapframe(tf); panic(\"undefined syscall %d, pid = %d, name = %s.\r\n\",\r\nnum, current->pid, current->name); } ...... =============libs-user-\r\nucore/syscall.c============= ...... int sys_exec(const char filename, const\r\nchar argv, const char envp) { return syscall(SYS_exec, filename, argv,\r\nenvp); } ...... =============libs-user-ucore/arch/i386/syscall.c=============\r\n...... uint32_t syscall(int num, ...) { va_list ap; va_start(ap, num);\r\nuint32_t a[MAX_ARGS]; int i; for (i = 0; i < MAX_ARGS; i++) { a[i] =\r\nva_arg(ap, uint32_t); } va_end(ap); uint32_t ret; asm volatile (\"int %1;\":\"=a\"\r\n(ret) :\"i\"(T_SYSCALL), \"a\"(num), \"d\"(a[0]), \"c\"(a[1]), \"b\"(a[2]), \"D\"(a[3]),\r\n\"S\"(a[4]) :\"cc\", \"memory\"); return ret; }\"", "degree_of_difficulty": "1", "source": "网络", "answer": "1）Three general methods used to pass parameters to the OS Simplest: pass the", "type": "question_answer", "options": "l load_icode to setup new memory space accroding binary prog. int\r\n  \r\n"}