{"knowledge": "文件系统实验。", "question": "(20140606-期末考试试题&参考答案.docx)VFS\r\n(12分)uCore的文件管理主要由以下四个部分组成：通用文件系统访问接口层, 文件系统抽象层(VFS), 具体文件系统层以及外设接口层，其中VFS层的作用\r\n是用来管理不同的文件系统并向上提供一致的接口给内核其他部分访问，在ucore中我们已经实现了一个具体的文件系统：Simple\r\nFS，并将该文件系统装载到了disk0上，假设ucore又实现了一个文件系统FAT32，并将这个新的文件系统装载到了disk1上。\r\n1）请简单描述一下如何修改VFS层的数据结构使其可以有效的管理上述已安装的具体文件系统。 涉及VFS层的数据结构如下：\r\n    ```\r\n\t    struct file {\r\n\t        enum {\r\n\t            FD_NONE, FD_INIT, FD_OPENED, FD_CLOSED,\r\n\t        } status;\r\n\t        bool readable;\r\n\t        bool writable;\r\n\t        int fd;\r\n\t        off_t pos;\r\n\t        struct inode node;\r\n\t        atomic_t open_count;\r\n\t    };\r\n\t    struct inode {\r\n\t        union {\r\n\t            struct device __device_info;\r\n\t            struct sfs_inode __sfs_inode_info;\r\n\t        } in_info;\r\n\t        enum {\r\n\t            inode_type_device_info = 0x1234,\r\n\t            inode_type_sfs_inode_info,\r\n\t        } in_type;\r\n\t        atomic_t ref_count;\r\n\t        atomic_t open_count;\r\n\t        struct fs in_fs;\r\n\t        const struct inode_ops in_ops;\r\n\t    };\r\n\t    struct fs {\r\n\t        union {\r\n\t            struct sfs_fs __sfs_info;\r\n\t        } fs_info;\r\n\t        enum {\r\n\t            fs_type_sfs_info,\r\n\t        } fs_type;\r\n\t        int (fs_sync)(struct fs fs);\r\n\t        struct inode (fs_get_root)(struct fs fs);\r\n\t        int (fs_unmount)(struct fs fs);\r\n\t        void (fs_cleanup)(struct fs fs);\r\n\t    };\r\n\t    struct inode_ops {\r\n\t        unsigned long vop_magic;\r\n\t        int (vop_open)(struct inode node, uint32_t open_flags);\r\n\t        int (vop_close)(struct inode node);\r\n\t        int (vop_read)(struct inode node, struct iobuf iob);\r\n\t        int (vop_write)(struct inode node, struct iobuf iob);\r\n\t        int (vop_getdirentry)(struct inode node, struct iobuf iob);\r\n\t        int (vop_create)(struct inode node, const char name, bool excl, struct inode node_store);\r\n\t        int (vop_lookup)(struct inode node, char path, struct inode node_store);\r\n\t        ……\r\n\t    };\r\n\t    ```\r\n2）两个具体文件系统均已实现了对数据文件的4种基本操作。现在有某个用户态进程执行了一个copy（source_path, dest_path,...）函数，\r\n该函数是把disk1根目录下的一个文件A.txt拷贝到了disk0的根目录下（不用考虑文件的大小），请结合ucore中对数据文件的操作流程描述一下这个函数的\r\n执行过程。", "degree_of_difficulty": "1", "source": "网络", "answer": "第一问7分，第二问5分；", "type": "question_answer", "options": "  \r\n"}