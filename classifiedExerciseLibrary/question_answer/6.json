{"knowledge": "进程状态与控制。", "question": "\"描述int fork(void)系统调用的功能和接口，给出程序fork.c的输出结果，并用图示给出所有进程的父子关系。注：1）getpid()和getpp\r\nid()是两个系统调用，分别返回本进程标识和父进程标识。2）你可以假定每次新进程创建时生成的进程标识是顺序加1得到的；在进程标识为1000的命令解释程序sh\r\nell中启动该程序的执行。 #include  #include  / getpid() and fork() are system calls\r\ndeclared in unistd.h. They return / / values of type pid_t. This pid_t is a\r\nspecial type for process ids. / / It's equivalent to int. / int main(void)\r\n{ pid_t childpid; int x = 5; int i; childpid = fork(); for ( i = 0; i < 3;\r\ni++) { printf(\"This is process %d; childpid = %d; The parent of this process\r\nhas id %d; i = %d; x = %d\r\n\", getpid(), childpid, getppid(), i, x); sleep(1);\r\nx++; } return 0; }\"", "degree_of_difficulty": "1", "source": "网络", "answer": "功能：复制当前进程，生成一个子进程（2分），并从当前位置继续执行（2分）； 接口：没有输入，父进程返回子进程标识（2分）；子进程返回零（2分）； 输出：", "type": "question_answer", "options": "  \r\n"}