{"knowledge": "虚拟内存管理实验。", "question": "（10分）当一个进程释放一个包含某虚地址的物理内存页时，需要让对应此物理内存页的管理数据结构Page进行清除处理，使得此物理内存页成为空闲。同时，还需把表示\r\n虚地址与物理地址映射关系的二级页表项清除，这个工作由page_remove_pte函数完成。\r\npage_remove_pte函数的调用关系图如下所示。请补全在 kern/mm/pmm.c中的page_remove_pte函数。\r\n![](files/attach/images/content/20150326/14273428621019.png)\r\n图1 page_remove_pte函数的调用关系图\r\n=============Pmm.h (kern\\mm)=============\r\n\\#define alloc_page() alloc_pages(1)\r\n\\#define free_page(page) free_pages(page, 1)\r\n......\r\nstatic inline struct Page \r\npte2page(pte_t pte) {\r\nif (!(pte & PTE_P)) {\r\npanic(\"pte2page called with invalid pte\");\r\n}\r\nreturn pa2page(PTE_ADDR(pte));\r\n}\r\n......\r\nstatic inline int\r\npage_ref_inc(struct Page page) {\r\npage->ref += 1;\r\nreturn page->ref;\r\n}\r\nstatic inline int\r\npage_ref_dec(struct Page page) {\r\npage->ref -= 1;\r\nreturn page->ref;\r\n}\r\n......\r\n=============Pmm.c (kern\\mm)=============\r\n......\r\n//page_remove_pte - free an Page sturct which is related linear address la\r\n// - and clean(invalidate) pte which is related linear address la\r\n//note: PT is changed, so the TLB need to be invalidate\r\nstatic inline void\r\npage_remove_pte(pde_t pgdir, uintptr_t la, pte_t ptep) {\r\n/ LAB2 EXERCISE 3: YOUR CODE\r\n\r\n Please check if ptep is valid, and tlb must be manually updated if mapping is updated\r\n\r\n Maybe you want help comment, BELOW comments can help you finish the code\r\n\r\n Some Useful MACROs and DEFINEs, you can use them in below implementation.\r\n MACROs or Functions:\r\n struct Page page pte2page(ptep): get the according page from the value of a ptep\r\n free_page : free a page\r\n page_ref_dec(page) : decrease page->ref. NOTICE: ff page->ref == 0 , then this page should be free.\r\n tlb_invalidate(pde_t pgdir, uintptr_t la) : Invalidate a TLB entry, but only if the page tables being\r\n edited are the ones currently in use by the processor.\r\n DEFINEs:\r\n PTE_P 0x001 // page table/directory entry flags bit : Present\r\n/\r\n\\#if 0\r\nif (0) { //(1) check if page directory is present\r\nstruct Page page = NULL; //(2) find corresponding page to pte\r\n//(3) decrease page reference\r\n//(4) and free this page when page reference reachs 0\r\n//(5) clear second page table entry\r\n//(6) flush tlb\r\n}\r\n\\#endif\r\n===Your code 1===\r\n}\r\n......\r\n// invalidate a TLB entry, but only if the page tables being\r\n// edited are the ones currently in use by the processor.\r\nvoid\r\ntlb_invalidate(pde_t pgdir, uintptr_t la) {\r\nif (rcr3() == PADDR(pgdir)) {\r\ninvlpg((void )la);\r\n}\r\n}\r\nstatic void\r\ncheck_alloc_page(void) {\r\npmm_manager->check();\r\ncprintf(\"check_alloc_page() succeeded!\r\n\");\r\n}\r\n=============Mmu.h (kern\\mm)=============\r\n/ page table/directory entry flags /\r\n\\#define PTE_P 0x001 // Present\r\n\\#define PTE_W 0x002 // Writeable\r\n\\#define PTE_U 0x004 // User\r\n\\#define PTE_PWT 0x008 // Write-Through\r\n\\#define PTE_PCD 0x010 // Cache-Disable\r\n\\#define PTE_A 0x020 // Accessed\r\n\\#define PTE_D 0x040 // Dirty\r\n\\#define PTE_PS 0x080 // Page Size\r\n\\#define PTE_MBZ 0x180 // Bits must be zero\r\n\\#define PTE_AVAIL 0xE00 // Available for software use\r\n// The PTE_AVAIL bits aren't used by the kernel or interpreted by the\r\n// hardware, so user processes are allowed to set them arbitrarily.\r\n\\#define PTE_USER (PTE_U | PTE_W | PTE_P)", "degree_of_difficulty": "1", "source": "网络", "answer": "if (ptep & PTE_P) {//判断页面存在（2分）", "type": "question_answer", "options": "  \r\n"}