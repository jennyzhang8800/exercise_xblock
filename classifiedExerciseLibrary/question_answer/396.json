{"knowledge": "进程状态与控制。", "question": "(20140410-2-期中考试试题v4a答案.docx)Fork\r\n（15分）进程管理是操作系统提供给应用程序的一种用于进程控制的服务。下面是一个用fork系统调用完成进程创建的程序。试回答下面问题：\r\n1) 描述fork系统调用的功能、调用接口。\r\n2) 补全程序的输出信息。\r\n    ```\r\n\t    //=========fork.c=========\r\n\t    #include\r\n\t    #include\r\n\t    #include\r\n\t    #include\r\n\t    #include\r\n\t    #define DEFAULT_TIME 5\r\n\t    #define DEFAULT_STATUS 0\r\n\t    int main (int argc, char argv) {\r\n\t        int child_id;\r\n\t        int seconds;\r\n\t        int status;\r\n\t        pid_t whodied;\r\n\t        status = DEFAULT_STATUS;\r\n\t        if (argc == 1)\r\n\t            seconds = DEFAULT_TIME;\r\n\t        else\r\n\t            seconds = atoi (argv[1]);\r\n\t        printf (\"Here I am in the program!  Time to wait = %d\r\n\t\", seconds);\r\n\t        system (\"ps -l\");\r\n\t        child_id = fork();\r\n\t        if (child_id) {\r\n\t            printf (\"I'm the parent at Line 33.  My parent's process ID is %d, My process ID is %d, status = %d.\r\n\t\", getpid(), getppid(), status);\r\n\t            whodied = wait (&status;);\r\n\t            printf (\"Child %d exited \", whodied);\r\n\t    / WIFEXITED  evaluates  to  true  when  the  process  exited  by using an exit(2V) call.\r\n\t     If WIFEXITED(status) is non-zero, WEXITSTATUS evaluates to  the low-order byte of the\r\n\t    argument that the child process passed to _exit() (see exit(2V)) or exit(3),  or  the  value  the  child  process returned from main() (see execve(2V)).\r\n\t    /\r\n\t            if (! WIFEXITED(status)) {\r\n\t                printf (\"abnormally!\r\n\t\");\r\n\t                }\r\n\t            else {\r\n\t                printf (\"with status %d.\r\n\t\", WEXITSTATUS(status));\r\n\t                }\r\n\t            printf (\"I'm the parent at Line 43.  My parent's process ID is %d, My process ID is %d, status = %d.\r\n\t\", getpid(), getppid(), WEXITSTATUS(status));\r\n\t            return status;\r\n\t            }\r\n\t        else {\r\n\t            status = 17;\r\n\t            sleep(seconds);\r\n\t            printf (\"I'm the child.  My parent's process ID is %d, My process ID is %d, status = %d.\r\n\t\", getpid(), getppid(), status);\r\n\t            printf (\"Bye now!\r\n\t\");\r\n\t            return status;\r\n\t            }\r\n\t        }\r\n\t    ```\r\n\tfork程序的两次执行时的输出信息\r\n\t    ```\r\n\t    xyong@portal:~/work$ ./a.out\r\n\t    Here I am in the program!  Time to wait = __(1)__\r\n\t    F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD\r\n\t    0 S  1000 11739 11738  0  80   0 -  6926 wait   pts/0    00:00:00 bash\r\n\t    0 S  1000 11862 11739  0  80   0 -  1041 wait   pts/0    00:00:00 a.out\r\n\t    0 S  1000 11863 11862  0  80   0 -  1101 wait   pts/0    00:00:00 sh\r\n\t    0 R  1000 11864 11863  0  80   0 -  2433 -      pts/0    00:00:00 ps\r\n\t    I'm the parent at Line 33.  My parent's process ID is __(2)__, My process ID is __(3)__, status = __(4)__.\r\n\t    I'm the child.  My parent's process ID is __(5)__, My process ID is __(6)__, status = __(7)__.\r\n\t    Bye now!\r\n\t    Child 11865 exited with status __(8)__.\r\n\t    I'm the parent at Line 43.  My parent's process ID is __(9)__, My process ID is __(10)__, status = __(11)__.\r\n\t    xyong@portal:~/work$ ./a.out 3\r\n\t    Here I am in the program!  Time to wait = __(12)__\r\n\t    F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD\r\n\t    0 S  1000 11739 11738  0  80   0 -  6926 wait   pts/0    00:00:00 bash\r\n\t    0 S  1000 11866 11739  0  80   0 -  1041 wait   pts/0    00:00:00 a.out\r\n\t    0 S  1000 11867 11866  0  80   0 -  1101 wait   pts/0    00:00:00 sh\r\n\t    0 R  1000 11868 11867  0  80   0 -  2433 -      pts/0    00:00:00 ps\r\n\t    I'm the parent at Line 33.  My parent's process ID is __(13)__, My process ID is __(14)__, status = __(15)__.\r\n\t    I'm the child.  My parent's process ID is __(16)__, My process ID is __(17)__, status = __(18)__.\r\n\t    Bye now!\r\n\t    Child __(19)__ exited with status __(20)__.\r\n\t    I'm the parent at Line 43.  My parent's process ID is 11866, My process ID is __(21)__, status = __(22)__.\r\n\t    xyong@portal:~/work$\r\n\t    ```", "degree_of_difficulty": "1", "source": "网络", "answer": "fork程序的两次执行时的输出信息", "type": "question_answer", "options": "  \r\n"}